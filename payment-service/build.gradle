plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "com.palantir.docker" version "0.30.0"
    id "com.palantir.docker-run" version "0.30.0"
}

group = 'com.epam.amorozov'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    jaxb
}

repositories {
    mavenCentral()
}

def fileName = 'payment-service'
bootJar{
    mainClass = 'com.epam.amorozov.paymentservice.PaymentServiceApplication'
    archiveName "${fileName}.jar"
}

docker {
    name "payment-service:${project.version}"
    copySpec.from(jar).rename(".*","payment-service.jar")
    files 'payment-service.jar'
    tag 'DockerHub', "rumoroz/gradle-payment-service:${project.version}"
}

dockerRun {
    name "${project.name}"
    image "${project.name}:${project.version}"
    clean true
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc:2.6.1'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage'
    }

    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

//    runtimeOnly group: 'com.h2database', name: 'h2', version: '2.0.202'
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.3.1'

    jaxb(
            'com.sun.xml.bind:jaxb-xjc:2.3.1',
            'com.sun.xml.bind:jaxb-impl:2.3.1',
            'org.glassfish.jaxb:jaxb-runtime:2.3.3'
    )

    implementation group: 'wsdl4j', name: 'wsdl4j', version: '1.6.3'
}

test {
    useJUnitPlatform()
}

task jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    def jaxbTargetDir = file("src/main/java")
    doLast {
        jaxbTargetDir.mkdirs()
        ant.taskdef(
                name: 'xjc',
                classname: 'com.sun.tools.xjc.XJCTask',
                classpath: configurations.jaxb.asPath
        )
        ant.jaxbTargetDir = jaxbTargetDir
        ant.xjc(
                destdir: '${jaxbTargetDir}',
                package: 'com.epam.amorozov.paymentservice.soaps.payments',
                schema: 'src/main/resources/xsd/payment.xsd'
        )
    }
}

//jaxb.enabled = false
